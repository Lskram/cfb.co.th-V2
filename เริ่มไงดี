fb.co.th-V2 — Django + Docker (คู่มือโคตรละเอียด)

โปรเจกต์ Django รันบน Docker Compose (web + db + nginx)
ใช้ได้ทั้ง Windows / macOS / Linux โดยคู่มือนี้อธิบายด้วย Windows + PowerShell + Docker Desktop

0) สิ่งที่ต้องมีก่อนเริ่ม (Requirements)

Docker Desktop ติดตั้งแล้ว และเปิดใช้งาน (WSL2 บน Windows)

Git (ไว้ clone โปรเจกต์)

(ไม่บังคับ) Python — ใช้แค่สุ่ม SECRET_KEY ได้ง่าย ๆ

ตรวจสอบ Docker ทำงาน:

docker --version
wsl -l -v     # ควรเห็น docker-desktop = Running, VERSION=2

1) Clone โปรเจกต์
git clone <URL-repo-ของคุณ>
cd cfb.co.th-V2


หมายเหตุ CRLF/LF (Windows): โปรเจกต์นี้ใช้ Linux line endings (LF) กับไฟล์ shell/config เพื่อไม่ให้ Docker พัง
ถ้าเห็นคำเตือนเวลา git add ว่า “LF will be replaced by CRLF” ให้ทำตาม “ภาคผนวก A” ด้านล่างเพื่อบังคับใช้ LF

2) สร้างไฟล์ .env.docker (อย่า commit)

โปรเจกต์นี้แยกค่าคอนฟิกไว้ใน .env.docker (อ่านเฉพาะตอนรันใน Docker)
ให้ สร้างไฟล์ นี้ขึ้นมาเอง:

notepad .env.docker


ใส่ค่าตัวอย่างนี้ (เปลี่ยน DJANGO_SECRET_KEY ก่อนใช้งานจริง):

DJANGO_DEBUG=0
DJANGO_SECRET_KEY=please-change-me
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
TZ=Asia/Bangkok


อยากได้ SECRET_KEY เร็ว ๆ:

python - <<PY
import secrets,string
a=string.ascii_letters+string.digits+string.punctuation
print(''.join(secrets.choice(a) for _ in range(64)))
PY

3) โครง Compose ที่เราจะได้

db = Postgres (ฐานข้อมูล)

web = Django + Gunicorn (ตัวรันแอป)

nginx = Reverse proxy + เสิร์ฟ static/media

โฟลเดอร์สำคัญ:

templates/ = เทมเพลต HTML ของแอปคุณ

static/ = ไฟล์ static ของคุณเอง (ถ้ามี)

staticfiles/ = ไฟล์รวมทั้งหมดหลัง collectstatic (Django admin ก็จะถูกคัดลอกมาที่นี่)

media/ = ไฟล์อัปโหลดของผู้ใช้

entrypoint.sh = สคริปต์บูต: รอ DB → collectstatic → migrate → รัน Gunicorn

4) รันครั้งแรก (Build & Up)

ก่อนรัน ให้เปิด Docker Desktop ขึ้นมาก่อน

docker compose up --build


สิ่งที่ควรเห็นใน log:

db → healthy

web → มี collectstatic, migrate, แล้วขึ้น Booting worker with pid ...

nginx → listening on port 80

ถ้าอยากรันแบบฉากหลัง (ไม่ผูกกับหน้าต่าง terminal):

docker compose up -d --build

5) เปิดเว็บ

Web: http://localhost

Django Admin: http://localhost/admin

ถ้าพอร์ต 80 ชน ให้แก้ docker-compose.yml ของ nginx จาก "80:80" เป็น "8080:80" แล้วเข้า http://localhost:8080

6) สร้างแอดมิน (ครั้งแรกเท่านั้น)
docker compose exec web bash -lc "python manage.py createsuperuser"


จากนั้นเข้า /admin ล็อกอินได้เลย

ถ้าแอดมินเป็นภาษาไทย (เพราะ LANGUAGE_CODE="th" ใน settings.py)
อยากเป็นอังกฤษ เปลี่ยนเป็น "en-us" แล้ว docker compose restart web

7) คำสั่ง Docker ที่ใช้บ่อย (อธิบายทีละบรรทัด)
สถานะ & บันทึก
docker compose ps              # ดูสถานะคอนเทนเนอร์ทั้งหมด
docker compose logs -f web     # ดู log ของ web แบบ real-time (กด Ctrl+C เพื่อออก)
docker compose logs -f nginx
docker compose logs -f db

เปิด/ปิด/รีสตาร์ท
docker compose up -d           # เปิดทั้งหมดแบบฉากหลัง
docker compose stop            # หยุดคอนเทนเนอร์ (ข้อมูลยังอยู่)
docker compose start           # เปิดใหม่หลัง stop
docker compose restart web     # รีสตาร์ทเฉพาะ service web
docker compose down            # ปิดและลบคอนเทนเนอร์ (ไม่ลบ volume)
docker compose down -v         # ปิด + ลบ volumes (เริ่มใหม่สะอาด)

จัดการฐานข้อมูล/คำสั่ง Django ในคอนเทนเนอร์
docker compose exec web bash                       # เข้ากล่อง shell ของ web
docker compose exec web bash -lc "python manage.py migrate"
docker compose exec web bash -lc "python manage.py collectstatic --noinput"
docker compose exec web bash -lc "python manage.py createsuperuser"

ดึงภาพ (เผื่อโดน proxy/firewall ขวาง)
docker pull nginx:1.27-alpine
docker pull postgres:16

8) Static/Admin CSS ไม่มา? (วิธีเช็กแบบเร็ว)

ก. ยืนยันว่า collectstatic เกิดจริง

docker compose exec web ls -la /app/staticfiles/admin/css | head -n 20
# ควรเห็น base.css, login.css ฯลฯ


ข. nginx เห็นไฟล์ static จาก volume หรือไม่

docker compose exec nginx ls -la /vol/static/admin/css | head -n 20


ค. ยืนยัน HTTP Header ถูก (ควรเป็น text/css)

# ใน PowerShell ใช้ iwr แทน curl
Invoke-WebRequest -Uri http://localhost/static/admin/css/base.css -Method Head
# Content-Type: text/css  ← ต้องเห็นแบบนี้


ง. ยังไม่มา? รีสตาร์ท nginx + เคลียร์ cache

docker compose exec nginx sh -lc "nginx -t"
docker compose restart nginx


แล้วเปิด /admin ใน Incognito หรือเปิด DevTools → Network → Disable cache → Ctrl+F5

9) เปิดเครื่องใหม่ต้องทำอะไร?

ถ้า docker-compose.yml ตั้ง restart: unless-stopped แล้ว (แนะนำใส่ทั้ง db, web, nginx)
เมื่อ Docker Desktop ทำงาน คอนเทนเนอร์จะพยายามขึ้นเอง

หรือสั่งเอง:

docker compose up -d

10) ฟีเจอร์เสริมที่มีอยู่แล้วในโปรเจกต์นี้

รอ DB อัตโนมัติ (ใน entrypoint.sh ใช้ nc -z db 5432)

collectstatic & migrate อัตโนมัติ ทุกครั้งที่คอนเทนเนอร์ web ขึ้น

Nginx เสิร์ฟ static/media โดยตรง (เร็วกว่าให้ Django เสิร์ฟเอง)

ปรับ LANGUAGE_CODE, TIME_ZONE เป็นไทย (เปลี่ยนเป็นอังกฤษได้)

11) โครงสร้างไฟล์ (สำคัญ ๆ)
.
├─ home/                     # ตัวอย่าง Django app (แก้/เพิ่มตามโปรเจกต์จริง)
├─ mysite/                   # Django project (settings.py อยู่ที่นี่)
├─ templates/                # เทมเพลต HTML
├─ static/                   # static ของโปรเจกต์คุณ (ถ้ายังไม่ใส่ไฟล์จะว่าง)
├─ staticfiles/              # (สร้างอัตโนมัติ) ที่เก็บไฟล์รวมหลัง collectstatic
├─ media/                    # ไฟล์อัปโหลด
├─ Dockerfile                # อิมเมจ web
├─ docker-compose.yml        # รวม db/web/nginx
├─ docker-compose.override.yml (ถ้ามี)
├─ nginx.conf                # Config เสิร์ฟ static/media + reverse proxy
├─ entrypoint.sh             # สคริปต์บูต web
├─ requirements.txt
├─ .gitattributes            # บังคับใช้ LF สำหรับไฟล์สำคัญ
├─ .gitignore                # กันไม่ให้ไฟล์ลับ/ฐาน dev ขึ้น repo
└─ .env.docker               # (คุณสร้างเอง ห้าม commit)

12) เคล็ดลับสำหรับ Windows + PowerShell

curl ใน PowerShell จริง ๆ คือ Invoke-WebRequest (ย่อ iwr)
ถ้าต้องการ curl ของแท้ ให้ใช้ curl.exe

CRLF ทำให้ shell script รันไม่ได้ → ใช้ LF เสมอสำหรับ .sh, Dockerfile, .conf, .yml
(โครงนี้มี .gitattributes คุมให้แล้ว)

13) ความปลอดภัย (สำคัญ!)

อย่า commit: .env, .env.docker, db.sqlite3, media/, staticfiles/

เปลี่ยน DJANGO_SECRET_KEY เสมอก่อน deploy จริง

ตั้ง DJANGO_ALLOWED_HOSTS ให้เป็นโดเมนจริงเมื่อไป Production

เปิด HTTPS (เช่น Caddy หรือ Nginx + Certbot) เมื่อขึ้นโฮสต์จริง

ภาคผนวก A — ตั้งค่า Git ให้รองรับ LF บน Windows

เพื่อป้องกัน CRLF ทำให้ Docker/Linux พัง:

สร้างไฟล์ .gitattributes (ที่ root):

* text=auto
*.sh text eol=lf
*.py text eol=lf
*.yml text eol=lf
*.conf text eol=lf
*.dockerignore text eol=lf
Dockerfile text eol=lf


แปลงไฟล์สำคัญให้เป็น LF (ครั้งเดียว):

(Get-Content .\entrypoint.sh -Raw).Replace("`r`n","`n") | Set-Content .\entrypoint.sh -NoNewline
(Get-Content .\nginx.conf -Raw).Replace("`r`n","`n")     | Set-Content .\nginx.conf -NoNewline
(Get-Content .\docker-compose.yml -Raw).Replace("`r`n","`n") | Set-Content .\docker-compose.yml -NoNewline


ปิด auto CRLF (ระดับ repo):

git config core.autocrlf false

ภาคผนวก B — คำสั่ง “ล้างใหม่หมด” (กรณีอยากเริ่มจากศูนย์)
docker compose down -v
docker compose up --build


จบ! 🎉
ด้วย README นี้ คุณสามารถ Clone โปรเจกต์ไปทำที่บ้าน แล้วรัน Docker + เปิด /admin ได้ทันที ถ้าติดตรงไหน ก๊อป log มาวาง ผมจะช่วยไล่แก้ให้ทีละบรรทัดจนกว่าจะขึ้นสมบูรณ์ครับ 🔧🚀

